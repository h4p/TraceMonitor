package com.elster.nppTraceMonitor;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */


import com.elster.nppTraceMonitor.db.ModuleTrace;
import java.awt.Component;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author lu1721
 */
public class FilterDialog extends javax.swing.JDialog {

    
    private java.awt.Frame      parent;
    ListSelectionModel          selectionModel;
    private Vector<Object[]>    activeFilters;
    private ArrayList<String>   columnNames;
    private String[]            operationNames;
    private String[]            junctionNames;
    /**
     * Creates new form FilterDialog
     */
    public FilterDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        this.parent = parent;

        selectionModel = statementTbl.getSelectionModel();
        selectionModel.setSelectionInterval(0, 3);
        
        
        // These are the combobox values
        DefaultTableModel model = (DefaultTableModel)statementTbl.getModel();
        columnNames     = new ArrayList<String>();
        operationNames  = new String[]{"=", "!=", ">", ">=", "<", "<=", "LIKE"};
        junctionNames   = new String[]{"", "AND", "OR" };
        

        
        
        // Columns
        columnNames.add ( "moduleId.moduleId" ); // first moduleId gets you the 'Module' object itself, the second the id
        columnNames.add ( "traceId.fileId.fileName" );
        columnNames.add ( "traceId.line" );
        columnNames.add ( "logLevel" );
        columnNames.add ( "decodedMessage" );

        
        
        int vColIndex = 0;
        TableColumn col = statementTbl.getColumnModel().getColumn(vColIndex);
        col.setCellEditor(new MyComboBoxEditor( columnNames.toArray( new String[columnNames.size()] ) ));
        col.setCellRenderer(new MyComboBoxRenderer( columnNames.toArray( new String[columnNames.size()] ) ));
        
        
        
        // Operations
        vColIndex = 1;
        col = statementTbl.getColumnModel().getColumn(vColIndex);
        col.setCellEditor(new MyComboBoxEditor( operationNames ) );
        col.setCellRenderer(new MyComboBoxRenderer( operationNames ));
        
        
        // Junction
        vColIndex = 3;
        col = statementTbl.getColumnModel().getColumn(vColIndex);
        col.setCellEditor(new MyComboBoxEditor( junctionNames ) );
        col.setCellRenderer(new MyComboBoxRenderer( junctionNames ));
        
        
        // Get filters from parent 
        if( parent instanceof TraceMonitorFrame )
        {
            activeFilters = ((TraceMonitorFrame)parent).getModuleTraceFilters();
            if( activeFilters != null )
            {
                for( Object[] filter : activeFilters )
                {
                    ((DefaultTableModel)statementTbl.getModel()).addRow( filter );
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        statementTbl = new javax.swing.JTable();
        addBtn = new javax.swing.JButton();
        delBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        okBtn.setText("OK");
        okBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okBtnActionPerformed(evt);
            }
        });

        statementTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Column", "Operator", "Value", "Junction"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(statementTbl);
        statementTbl.getColumnModel().getColumn(0).setMinWidth(150);

        addBtn.setText("Insert");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        delBtn.setText("Delete");
        delBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delBtnActionPerformed(evt);
            }
        });

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(okBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelBtn))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 657, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(delBtn)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(delBtn)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelBtn)
                    .addComponent(okBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        DefaultTableModel model = (DefaultTableModel)statementTbl.getModel();
        model.addRow(new Object[]{"moduleId.moduleId", "=", "", ""});
        
    }//GEN-LAST:event_addBtnActionPerformed

    private void delBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delBtnActionPerformed
        DefaultTableModel model = (DefaultTableModel)statementTbl.getModel();
        
        int currentRowNum = statementTbl.getSelectedRow();
        if( currentRowNum != -1)
        {
            System.out.println("Removing row: " +  currentRowNum);
            model.removeRow( statementTbl.getSelectedRow() );
        }
        
    }//GEN-LAST:event_delBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void okBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBtnActionPerformed
        
        // Standard query
        Vector<Object[]> filters = new Vector<Object[]>();
        
        // Check if filter in table
        if(statementTbl.getRowCount() > 0)
        {
            // Add statements to query
            DefaultTableModel model = (DefaultTableModel)statementTbl.getModel();
            for( int i=0; i < statementTbl.getRowCount(); i++)
            {
                String column       = model.getValueAt(i, 0).toString();
                String operation    = model.getValueAt(i, 1).toString();
                String value        = model.getValueAt(i, 2).toString();
                String junction     = model.getValueAt(i, 3).toString();
                
                filters.add(new Object[] {column, operation, value, junction} );
            }
            
            
            
            // Return new query to parent object
            if( parent instanceof TraceMonitorFrame )
            {
                TraceMonitorFrame t = (TraceMonitorFrame)parent;
                t.setModuleTraceFilters( filters );
            }
            
        }
        else
        {
            
            // Return unaltered query to parent object
            if( parent instanceof TraceMonitorFrame )
            {
                TraceMonitorFrame t = (TraceMonitorFrame)parent;
                t.setModuleTraceFilters( null );
            }
        }
        
        this.dispose();
    }//GEN-LAST:event_okBtnActionPerformed

    
    public class MyComboBoxRenderer extends JComboBox implements TableCellRenderer {
            public MyComboBoxRenderer(String[] items) {
                super(items);
            }

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {
                if (isSelected) {
                    setForeground(table.getSelectionForeground());
                    super.setBackground(table.getSelectionBackground());
                } else {
                    setForeground(table.getForeground());
                    setBackground(table.getBackground());
                }

                // Select the current value
                setSelectedItem(value);
                return this;
            }
    }

    public class MyComboBoxEditor extends DefaultCellEditor {
        public MyComboBoxEditor(String[] items) {
            super(new JComboBox(items));
        }
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FilterDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FilterDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FilterDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FilterDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                FilterDialog dialog = new FilterDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton delBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton okBtn;
    private javax.swing.JTable statementTbl;
    // End of variables declaration//GEN-END:variables
}

