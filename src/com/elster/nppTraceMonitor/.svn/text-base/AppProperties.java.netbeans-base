/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.elster.nppTraceMonitor;


import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

/**
 * A wrapper class to manage properties. 
 * It allows access from multiple threads. 
 * The key is an enum type instead of a string.
 * 
 * This centralized approach also abstracts from the
 * form the data is saved in.
 * 
 * @author wesselst
 */
public final class AppProperties 
{
   
    private static final String FILE_PATH = AppProperties.class.getResource("com.elster.nppTraceMonitor.AppProperties.properties").getFile();
    private static AppProperties instance; // for singleton 
    private final Properties properties = new Properties();
    
    public static synchronized AppProperties getInstance() throws IOException 
    {
        if ( instance == null ) {
            instance = new AppProperties();
        }
        
        return instance;
    }
    
    private AppProperties() throws IOException 
    {
        readAppProperties();
    }

    public synchronized void readAppProperties() throws IOException
    {
        FileInputStream in = null;
        try
        {
            in = new FileInputStream( FILE_PATH );
            properties.load( in );
        } 
        finally 
        {
            try
            {
                in.close();
            }
            catch( IOException e) 
            {
                // quiet close
            }
        }
    }
    
    public synchronized String getProperty( final PropertyName key)
    {
        return properties.getProperty( key.propertyKey );
    }
    
    public synchronized void setProperty( final PropertyName key, final String value )
    {
        properties.setProperty( key.propertyKey, value);
    }
    
    public static String getPropertyFilePath()
    {
        return new File( FILE_PATH ).getAbsolutePath();
    }
    
}
