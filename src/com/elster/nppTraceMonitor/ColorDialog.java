/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.elster.nppTraceMonitor;

import com.elster.nppTraceMonitor.utils.SystemUtils;
import java.awt.Color;
import java.io.*;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author lu1721
 */



public class ColorDialog extends javax.swing.JDialog {

    // Simple Console Logger
    private static final Logger LOGGER = Logger.getLogger(ColorDialog.class.getName());
    
    
    /** Creates new form ColorDialog */
    public ColorDialog (java.awt.Frame parent, boolean modal) {
        super (parent, modal);
        initComponents ();
    
        colorChooser.getSelectionModel ().addChangeListener ( new ChangeListener () {
            @Override
            public void stateChanged (ChangeEvent e) {
                if(emergRad.isSelected ())
                    emergEdt.setText(""+colorChooser.getColor ().getRGB ());
                if(critRad.isSelected ())
                    critEdt.setText(""+colorChooser.getColor ().getRGB ());
                if(ErrRad.isSelected ())
                    errEdt.setText(""+colorChooser.getColor ().getRGB ());
                if(WarnRad.isSelected ())
                    warnEdt.setText(""+colorChooser.getColor ().getRGB ());
                if(NoticeRad.isSelected ())
                    noticeEdt.setText (""+colorChooser.getColor ().getRGB ());
                if(InfoRad.isSelected ())
                    infoEdt.setText (""+colorChooser.getColor().getRGB ());
                if(debugRad.isSelected ())
                    debugEdt.setText (""+colorChooser.getColor().getRGB ());
            }
        });
        
        
        
        
        // load preferences
        Properties properties = new Properties();
        try {
            InputStream in = new FileInputStream (new File(SystemUtils.defaultPropertiesDirectory (), "tracecolors.properties") );
            properties.load(in);
            emergEdt.setText( properties.getProperty ("emerg", "") );
            critEdt.setText( properties.getProperty ("crit", "") );
            errEdt.setText( properties.getProperty ("err", "") );
            warnEdt.setText( properties.getProperty ("warn", "") );
            noticeEdt.setText( properties.getProperty ("notice", "") );
            infoEdt.setText( properties.getProperty ("info", "") );
            debugEdt.setText( properties.getProperty ("debug", "") );
            return;
        } catch(FileNotFoundException e ) {
            LOGGER.log(Level.INFO, "Properties were not written before. Assigning standard values");
        } catch(IOException e) { 
            System.out.println("IOException while reading tracecolors.properties");
        }
        assignDefaultColors ();
    
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings ("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGrp = new javax.swing.ButtonGroup();
        colorChooser = new javax.swing.JColorChooser();
        okBtn = new javax.swing.JButton();
        emergEdt = new javax.swing.JTextField();
        critEdt = new javax.swing.JTextField();
        errEdt = new javax.swing.JTextField();
        warnEdt = new javax.swing.JTextField();
        infoEdt = new javax.swing.JTextField();
        debugEdt = new javax.swing.JTextField();
        noticeEdt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        defaultBtn = new javax.swing.JButton();
        emergRad = new javax.swing.JRadioButton();
        critRad = new javax.swing.JRadioButton();
        ErrRad = new javax.swing.JRadioButton();
        WarnRad = new javax.swing.JRadioButton();
        NoticeRad = new javax.swing.JRadioButton();
        InfoRad = new javax.swing.JRadioButton();
        debugRad = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        okBtn.setText("Ok");
        okBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okBtnActionPerformed(evt);
            }
        });

        emergEdt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                emergEdtMouseReleased(evt);
            }
        });

        critEdt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                critEdtMouseReleased(evt);
            }
        });

        errEdt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                errEdtMouseReleased(evt);
            }
        });

        warnEdt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                warnEdtMouseReleased(evt);
            }
        });

        infoEdt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                infoEdtMouseReleased(evt);
            }
        });

        debugEdt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                debugEdtMouseReleased(evt);
            }
        });

        noticeEdt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                noticeEdtMouseReleased(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Trace Level Colors");

        defaultBtn.setText("Default");
        defaultBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultBtnActionPerformed(evt);
            }
        });

        buttonGrp.add(emergRad);
        emergRad.setText("Emergency");
        emergRad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                emergRadMouseReleased(evt);
            }
        });

        buttonGrp.add(critRad);
        critRad.setText("Critical");
        critRad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                critRadMouseReleased(evt);
            }
        });

        buttonGrp.add(ErrRad);
        ErrRad.setText("Error");
        ErrRad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                ErrRadMouseReleased(evt);
            }
        });

        buttonGrp.add(WarnRad);
        WarnRad.setText("Warning");
        WarnRad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                WarnRadMouseReleased(evt);
            }
        });

        buttonGrp.add(NoticeRad);
        NoticeRad.setText("Notice");
        NoticeRad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                NoticeRadMouseReleased(evt);
            }
        });

        buttonGrp.add(InfoRad);
        InfoRad.setText("Info");
        InfoRad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                InfoRadMouseReleased(evt);
            }
        });

        buttonGrp.add(debugRad);
        debugRad.setText("Debug");
        debugRad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                debugRadMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel8))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(emergRad)
                            .addComponent(critRad)
                            .addComponent(ErrRad)
                            .addComponent(WarnRad)
                            .addComponent(NoticeRad)
                            .addComponent(InfoRad)
                            .addComponent(debugRad))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(critEdt, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(errEdt)
                            .addComponent(warnEdt)
                            .addComponent(infoEdt)
                            .addComponent(debugEdt)
                            .addComponent(emergEdt)
                            .addComponent(noticeEdt)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(defaultBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(okBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colorChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(emergEdt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(emergRad))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(critEdt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(critRad))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(errEdt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ErrRad))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(warnEdt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(WarnRad))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(noticeEdt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NoticeRad))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(infoEdt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(InfoRad))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(debugEdt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(debugRad))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(okBtn)
                            .addComponent(defaultBtn)))
                    .addComponent(colorChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void assignDefaultColors() {
        emergEdt.setText( "-36482" );
        critEdt.setText( "-83714" );
        errEdt.setText( "-18814" );
        warnEdt.setText( "-3682" );
        noticeEdt.setText( "-3735668" );
        infoEdt.setText( "-720962" );
        debugEdt.setText( "-3342388" );
    }
    private void okBtnActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBtnActionPerformed
        try  {
            Properties prop = new Properties();            
            OutputStream out = new FileOutputStream (new File(SystemUtils.defaultPropertiesDirectory (), "tracecolors.properties") );
            prop.setProperty ("emerg", emergEdt.getText());
            prop.setProperty ("crit", critEdt.getText ());
            prop.setProperty ("err", errEdt.getText ());
            prop.setProperty ("warn", warnEdt.getText ());
            prop.setProperty ("notice", noticeEdt.getText ());
            prop.setProperty ("info", infoEdt.getText ());
            prop.setProperty ("debug", debugEdt.getText ());
            prop.store(out, "");
        }        
        catch( IOException e ) {
            System.out.println("IOException");
        }
        catch( Exception e ) {
            JOptionPane.showMessageDialog (this, e, "Exception", JOptionPane.ERROR_MESSAGE);
        }
            
        if( this.getParent () instanceof TraceMonitorFrame )
            ((TraceMonitorFrame)this.getParent ()).loadTraceColors ();
        this.dispose ();
        
    }//GEN-LAST:event_okBtnActionPerformed

    private void emergEdtMouseReleased (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_emergEdtMouseReleased
       emergRad.setSelected (true);
       if(!emergEdt.getText().equals("")) {
           colorChooser.setColor( Integer.parseInt(emergEdt.getText()) );
       }
    }//GEN-LAST:event_emergEdtMouseReleased

    private void critEdtMouseReleased (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_critEdtMouseReleased
       critRad.setSelected (true);
       if(!critEdt.getText().equals("")) {
           colorChooser.setColor( Integer.parseInt(critEdt.getText() ));
       }
    }//GEN-LAST:event_critEdtMouseReleased

    private void errEdtMouseReleased (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_errEdtMouseReleased
        ErrRad.setSelected(true);
       if(!errEdt.getText().equals("")) {
           colorChooser.setColor( Integer.parseInt(errEdt.getText() ));
       }
    }//GEN-LAST:event_errEdtMouseReleased

    private void warnEdtMouseReleased (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_warnEdtMouseReleased
        WarnRad.setSelected(true);
        if(!warnEdt.getText().equals("")) {
           colorChooser.setColor( Integer.parseInt(warnEdt.getText() ));
       }
    }//GEN-LAST:event_warnEdtMouseReleased

    private void noticeEdtMouseReleased (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_noticeEdtMouseReleased
        NoticeRad.setSelected(true);
        if(!noticeEdt.getText().equals("")) {
           colorChooser.setColor( Integer.parseInt(noticeEdt.getText() ));
       }
    }//GEN-LAST:event_noticeEdtMouseReleased

    private void infoEdtMouseReleased (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_infoEdtMouseReleased
        InfoRad.setSelected(true);
        if(!infoEdt.getText().equals("")) {
           colorChooser.setColor( Integer.parseInt(infoEdt.getText() ));
       }
    }//GEN-LAST:event_infoEdtMouseReleased

    private void debugEdtMouseReleased (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_debugEdtMouseReleased
        debugRad.setSelected(true);
        if(!debugEdt.getText().equals("")) {
           colorChooser.setColor( Integer.parseInt(debugEdt.getText() ));
       }
    }//GEN-LAST:event_debugEdtMouseReleased

    private void defaultBtnActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultBtnActionPerformed
        assignDefaultColors ();
    }//GEN-LAST:event_defaultBtnActionPerformed

    private void emergRadMouseReleased (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_emergRadMouseReleased
       if(!emergEdt.getText().equals("")) {
           colorChooser.setColor( Integer.parseInt(emergEdt.getText()) );
       }
    }//GEN-LAST:event_emergRadMouseReleased

    private void critRadMouseReleased (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_critRadMouseReleased
       if(!critEdt.getText().equals("")) {
           colorChooser.setColor( Integer.parseInt(critEdt.getText()) );
       }
    }//GEN-LAST:event_critRadMouseReleased

    private void ErrRadMouseReleased (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ErrRadMouseReleased
       if(!errEdt.getText().equals("")) {
           colorChooser.setColor( Integer.parseInt(errEdt.getText()) );
       }
    }//GEN-LAST:event_ErrRadMouseReleased

    private void WarnRadMouseReleased (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WarnRadMouseReleased
       if(!warnEdt.getText().equals("")) {
           colorChooser.setColor( Integer.parseInt(warnEdt.getText()) );
       }
    }//GEN-LAST:event_WarnRadMouseReleased

    private void NoticeRadMouseReleased (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NoticeRadMouseReleased
       if(!noticeEdt.getText().equals("")) {
           colorChooser.setColor( Integer.parseInt(noticeEdt.getText()) );
       }
    }//GEN-LAST:event_NoticeRadMouseReleased

    private void InfoRadMouseReleased (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_InfoRadMouseReleased
       if(!infoEdt.getText().equals("")) {
           colorChooser.setColor( Integer.parseInt(infoEdt.getText()) );
       }
    }//GEN-LAST:event_InfoRadMouseReleased

    private void debugRadMouseReleased (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_debugRadMouseReleased
       if(!debugEdt.getText().equals("")) {
           colorChooser.setColor( Integer.parseInt(debugEdt.getText()) );
       }
    }//GEN-LAST:event_debugRadMouseReleased

    

    /**
     * @param args the command line arguments
     */
    public static void main (String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels ())
            {
                if ("Nimbus".equals (info.getName ()))
                {
                    javax.swing.UIManager.setLookAndFeel (info.getClassName ());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger (ColorDialog.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger (ColorDialog.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger (ColorDialog.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger (ColorDialog.class.getName ()).log (java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater (new Runnable () {

            public void run () {
                ColorDialog dialog = new ColorDialog (new javax.swing.JFrame (), true);
                dialog.addWindowListener (new java.awt.event.WindowAdapter () {

                    @Override
                    public void windowClosing (java.awt.event.WindowEvent e) {
                        System.exit (0);
                    }
                });
                dialog.setVisible (true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton ErrRad;
    private javax.swing.JRadioButton InfoRad;
    private javax.swing.JRadioButton NoticeRad;
    private javax.swing.JRadioButton WarnRad;
    private javax.swing.ButtonGroup buttonGrp;
    private javax.swing.JColorChooser colorChooser;
    private javax.swing.JTextField critEdt;
    private javax.swing.JRadioButton critRad;
    private javax.swing.JTextField debugEdt;
    private javax.swing.JRadioButton debugRad;
    private javax.swing.JButton defaultBtn;
    private javax.swing.JTextField emergEdt;
    private javax.swing.JRadioButton emergRad;
    private javax.swing.JTextField errEdt;
    private javax.swing.JTextField infoEdt;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField noticeEdt;
    private javax.swing.JButton okBtn;
    private javax.swing.JTextField warnEdt;
    // End of variables declaration//GEN-END:variables
}
